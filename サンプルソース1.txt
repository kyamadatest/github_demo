import java.io.Serializable;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;

@Path("fgjx9300")
@SessionScoped
public class FGJV9300ApiController implements Serializable {

    /* ユーザーセッション */
    AAJO1500 userSession;

    /* リクエスト情報 */
    AAJO1400 requestInfo;

    /* 退避データ */
    FGJV9300SaveData saveData;

    /* SQL登録・訂正・削除判断用 */
    FGJV9300ApiForm saveResultForm;

    /* 戻る処理時データ保持用 */
    FGJV9300ApiForm form;

    /* メッセージ取得 */
    AAJO0000 apiLogger = new AAJO0000();

    /* PF01名称 */
    private static final String FUNC1_NAME = "1:検索";

    FGJV9300ApiController() {

    }

    /**
     * CDIからインジェクション
     *
     * @param userSession
     * @param requestInfo
     */
    @Inject
    FGJV9300ApiController(
            AAJO1500 userSession,
            AAJO1400 requestInfo) {
        this.userSession = userSession;
        this.requestInfo = requestInfo;
    }

    /**
     * 初期処理
     *
     * @param request
     * @return FGJV9300ApiForm
     */
    @GET
    @Path("init")
    @Produces(MediaType.APPLICATION_JSON)
    public FGJV9300ApiForm init(@Context HttpServletRequest request) {
        FGJV9300ApiForm init = new FGJV9300ApiForm();

        try {
            // 開始ログ出力
            apiLogger.infoMessage(Level.INFO, userSession, request, FGJV9300ApiForm.PROGRAM_ID, AAJO1600.L_MODE_HEAD, "init START");

            // PGID・PG名称の追加
            requestInfo.setInit(FGJV9300ApiForm.PROGRAM_ID, FGJV9300ApiForm.PROGRAM_NAME);

            // 退避データ保持エリアの作成
            saveData = new FGJV9300SaveData();

            // 初期表示データを取得
            init = createInitData();

        } catch (Exception ex) {
            // メッセ―ジ設定
            init.getCmnFtr().setMessage(AAJO1900.getMessage(AAJO1800.MSG_AAM0599E));

            // エラーログ出力
            apiLogger.infoMessage(Level.SEVERE, userSession, request, FGJV9300ApiForm.PROGRAM_ID, AAJO1600.L_MODE_HEAD, "init Exception");
            apiLogger.exceptionLog(ex);
        } finally {
            // 終了ログ出力
            apiLogger.infoMessage(Level.INFO, userSession, request, FGJV9300ApiForm.PROGRAM_ID, AAJO1600.L_MODE_HEAD, "init END");
        }

        return init;
    }

    /**
     * PF06(確定)押下処理
     *
     * @param request
     * @param paraForm
     * @return
     * @throws Exception
     */
    @POST
    @Path("clickPF06")
    @Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
    @Consumes(MediaType.APPLICATION_JSON + "; charset=UTF-8")
    public FGJV9300ApiForm clickPF06(@Context HttpServletRequest request, FGJV9300ApiForm paraForm) throws Exception {
        FGJV9300ApiForm resultForm = paraForm;
        FGJV9300Body body = (FGJV9300Body) resultForm.getBody();         // ボディデータ
        String strMode = resultForm.getControl().getMode();              // モード
        FGJV9300SQLFacilities sqlFacility = new FGJV9300SQLFacilities();
        boolean errFlg = true;
        String strUrisksNm;
        String strMsgId = "";
        List<String> lstMsg = new ArrayList<>();   // 置換文字リスト

        try {
            // 開始ログ出力
            apiLogger.infoMessage(Level.INFO, userSession, request, FGJV9300ApiForm.PROGRAM_ID, paraForm.getControl().getMode(), "clickPF06 START");

            // 戻る処理用データ退避
            if (strMode.equals(AAJO1600.L_MODE_HEAD)) {
                saveData.setHeadBackData(resultForm);
            }
            if (strMode.equals(AAJO1600.L_MODE_BODY)) {
                // コードが空なら名称をクリアする
                for (int i = 0; i < body.getList().size(); i++) {
                    FGJV9300BodyRow row = (FGJV9300BodyRow) body.getRow(i);
                    // 組織コードチェック
                    if (row.getTxt_Ms_SskCd().getValue().trim().equals("")) {
                        row.getLbl_Ms_SskNm().setValue("");
                    }
                    // 得意先コードチェック
                    if (row.getTxt_Ms_CustCd().getValue().trim().equals("")) {
                        row.getLbl_Ms_CustNm().setValue("");
                    }
                }
                saveData.setBodyBackData(resultForm);
            }

            // 入力チェック
            // ここでボディー→確認時の組織名称、得意先名称の見た目上の変更も行う
            strMsgId = InputCheck(resultForm);
            if (!strMsgId.equals("")) {
                errFlg = false;
            }

            // コネクション作成
            sqlFacility.dbConnection();

            // 取引先マスタチェック            
            strUrisksNm = sqlFacility.searchTorihikisakiMst(userSession, body);
            if (strUrisksNm.equals("")) {
                errFlg = false;
                body.getWij_Hd_UrisksCd().setError(AAJO1210.ERR);
                if (strMsgId.equals("")) {
                    strMsgId = AAJO1800.MSG_FDM0130E;
                    lstMsg.add("");
                    resultForm.getCmnFtr().setMessage(AAJO1900.getCommonMessage(strMsgId, lstMsg));
                }
            }

            // SQLデータ（登録・更新・削除）処理
            if (errFlg && strMode.equals(AAJO1600.L_MODE_KAKUNIN)) {
                executeSQL(resultForm);
            }

            // 画面モード変更
            // ヘッダモードからボディモードに変更
            if (errFlg && strMode.equals(AAJO1600.L_MODE_HEAD)) {
                resultForm.getControl().setMode(AAJO1600.L_MODE_BODY);
                // ボディモードから確認モード
            } else if (errFlg && strMode.equals(AAJO1600.L_MODE_BODY)) {
                resultForm.getControl().setMode(AAJO1600.L_MODE_KAKUNIN);
                // 確認モードから結果モード
            } else if (errFlg && strMode.equals(AAJO1600.L_MODE_KAKUNIN)) {
                resultForm.getControl().setMode(AAJO1600.L_MODE_KEKKA);
            }
            form = resultForm;

            setPFKeyEnable(resultForm, resultForm.getControl().getMode());

            // 画面表示データ取得
            if (errFlg && (strMode.equals(AAJO1600.L_MODE_HEAD) || (strMode.equals(AAJO1600.L_MODE_KAKUNIN)))) {
                resultForm = createMeisaiData(resultForm.getControl().getMode(), strUrisksNm, body, paraForm);
                saveResultForm = resultForm;
            }

            // 更新確認・更新完了メッセージセット
            if (errFlg && resultForm.getControl().getMode().equals(AAJO1600.L_MODE_KAKUNIN)) {
                strMsgId = AAJO1800.MSG_FDM0002I;
            } else if (errFlg && resultForm.getControl().getMode().equals(AAJO1600.L_MODE_KEKKA)) {
                strMsgId = "FDM0005I";
            }
            // メッセージ設定
            if (errFlg) {
                if (!strMsgId.equals("")) {
                    resultForm.getCmnFtr().setMessage(AAJO1900.getCommonMessage(strMsgId, lstMsg));
                }
            }

        } catch (SQLException ex) {
            // メッセ―ジ設定
            resultForm.getCmnFtr().setMessage(AAJO1900.getMessage(AAJO1800.MSG_PPM0025E));

            // エラーログ出力
            apiLogger.infoMessage(Level.SEVERE, userSession, request, FGJV9300ApiForm.PROGRAM_ID, paraForm.getControl().getMode(), "clickPF06 Exception");
            apiLogger.exceptionLog(ex);
        } catch (Exception ex) {
            // メッセ―ジ設定
            resultForm.getCmnFtr().setMessage(AAJO1900.getMessage(AAJO1800.MSG_AAM0599E));

            // エラーログ出力
            apiLogger.infoMessage(Level.SEVERE, userSession, request, FGJV9300ApiForm.PROGRAM_ID, paraForm.getControl().getMode(), "clickPF06 Exception");
            apiLogger.exceptionLog(ex);
        } finally {
            // DBリソース解放
            sqlFacility.dbRelease();

            // 終了ログ出力
            apiLogger.infoMessage(Level.INFO, userSession, request, FGJV9300ApiForm.PROGRAM_ID, paraForm.getControl().getMode(), "clickPF06 END");
        }
        return resultForm;
    }

    /**
     * PF07(戻る)押下処理
     *
     * @param request
     * @param paraForm
     * @return FGJV9300ApiForm
     */
    @POST
    @Path("clickPF07")
    @Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
    @Consumes(MediaType.APPLICATION_JSON + "; charset=UTF-8")
    public FGJV9300ApiForm clickPF07(@Context HttpServletRequest request, FGJV9300ApiForm paraForm) {

        FGJV9300ApiForm resultForm = new FGJV9300ApiForm(userSession, requestInfo, paraForm.getControl().getMode());

        try {
            // 開始ログ出力
            apiLogger.infoMessage(Level.INFO, userSession, request, FGJV9300ApiForm.PROGRAM_ID, resultForm.getControl().getMode(), "clickPF07 START");

            String mode = resultForm.getControl().getMode();

            if (mode.equals(AAJO1600.L_MODE_BODY)
                    || mode.equals(AAJO1600.L_MODE_KEKKA)) {
                // 戻る用データ(ヘッダ)を画面に返す
                resultForm = new FGJV9300ApiForm(saveData.getHeadBackData());

                // ヘッダーに戻るとき、名称は保持する
                FGJV9300Body pBody = (FGJV9300Body) paraForm.getBody();
                FGJV9300Body rBody = (FGJV9300Body) resultForm.getBody();
                rBody.setLbl_Hd_UrisksNm(pBody.getLbl_Hd_UrisksNm());
            }

            if (mode.equals(AAJO1600.L_MODE_KAKUNIN)) {
                // 戻る用データ(ボディ)を画面に返す
                resultForm = new FGJV9300ApiForm(saveData.getBodyBackData());
                resultForm.getControl().setMode(AAJO1600.L_MODE_BODY);
            }

            setPFKeyEnable(resultForm, resultForm.getControl().getMode());

        } catch (Exception ex) {
            // メッセ―ジ設定
            form.getCmnFtr().setMessage(AAJO1900.getMessage(AAJO1800.MSG_AAM0599E));
            // エラーログ出力
            apiLogger.infoMessage(Level.SEVERE, userSession, request, FGJV9300ApiForm.PROGRAM_ID, resultForm.getControl().getMode(), "clickPF07 Exception");
            apiLogger.exceptionLog(ex);
        } finally {
            // 終了ログ出力
            apiLogger.infoMessage(Level.INFO, userSession, request, FGJV9300ApiForm.PROGRAM_ID, resultForm.getControl().getMode(), "clickPF07 END");
        }
        return resultForm;
    }

    /**
     * PF09(クリア)押下処理
     *
     * @param request
     * @param paramData
     * @return FGJV9300ApiForm
     */
    @POST
    @Path("clickPF09")
    @Produces(MediaType.APPLICATION_JSON)
    public FGJV9300ApiForm clickPF09(@Context HttpServletRequest request, AAJS0000 paramData) {

        FGJV9300ApiForm resultForm = new FGJV9300ApiForm(userSession, requestInfo, paramData.getMode());

        try {
            // 開始ログ出力
            apiLogger.infoMessage(Level.INFO, userSession, request, FGJV9300ApiForm.PROGRAM_ID, paramData.getMode(), "clickPF09 START");

            // 初期表示データを取得
            resultForm = createInitData();

        } catch (Exception ex) {
            // メッセ―ジ設定
            resultForm.getCmnFtr().setMessage(AAJO1900.getMessage(AAJO1800.MSG_AAM0599E));
            // エラーログ出力
            apiLogger.infoMessage(Level.SEVERE, userSession, request, FGJV9300ApiForm.PROGRAM_ID, paramData.getMode(), "clickPF09 Exception");
            apiLogger.exceptionLog(ex);
        } finally {
            // 終了ログ出力
            apiLogger.infoMessage(Level.INFO, userSession, request, FGJV9300ApiForm.PROGRAM_ID, paramData.getMode(), "clickPF09 END");
        }

        return resultForm;
    }

    /**
     * 初期表示データ作成
     *
     * @return
     */
    private FGJV9300ApiForm createInitData() throws Exception {

        FGJV9300ApiForm resultForm;

        // 初期表示データを取得
        resultForm = new FGJV9300ApiForm(userSession, requestInfo, AAJO1600.L_MODE_HEAD);

        resultForm.getCmnFtr().getFunckey(1).setName(FUNC1_NAME);             // 検索
        resultForm.getCmnFtr().getCommonFunckey(6).setSG(AAJO1220.ENABLED);   // 確認
        resultForm.getCmnFtr().getCommonFunckey(8).setSG(AAJO1220.ENABLED);   // Hコピー
        resultForm.getCmnFtr().getCommonFunckey(9).setSG(AAJO1220.ENABLED);   // クリア
        resultForm.getCmnFtr().getCommonFunckey(10).setSG(AAJO1220.ENABLED);  // 終了

        return resultForm;
    }

    /**
     * 表示データ作成
     *
     * @return
     */
    private FGJV9300ApiForm createMeisaiData(String mode, String strUrisksNm, FGJV9300Body body, FGJV9300ApiForm paraForm) throws Exception {

        FGJV9300ApiForm resultForm = paraForm;
        FGJV9300SQLFacilities sqlFacility = new FGJV9300SQLFacilities();

        try {
            // コネクション作成
            sqlFacility.dbConnection();

            // SQLよりデータ取得
            resultForm = new FGJV9300ApiForm(userSession, requestInfo, mode, strUrisksNm, paraForm, sqlFacility.searchSQL(userSession, body));

            // フッター部ボタンの使用可否
            setPFKeyEnable(resultForm, mode);

        } catch (SQLException ex) {
            // メッセ―ジ設定
            resultForm.getCmnFtr().setMessage(AAJO1900.getMessage(AAJO1800.MSG_PPM0025E));

            // エラーログ出力
            throw ex;
        } finally {
            // コネクション開放
            sqlFacility.dbRelease();
        }
        return resultForm;
    }

    /**
     * PF06:確認押下の入力チェック
     *
     * @param returnForm
     * @return
     */
    private String InputCheck(FGJV9300ApiForm resultForm) throws Exception {
        String strMsgId = "";
        List<String> lstMsg = new ArrayList<>();   // 置換文字リスト
        FGJV9300SQLFacilities sqlFacility = new FGJV9300SQLFacilities();

        try {
            // 変数宣言
            AAJO1700 inputCheck = new AAJO1700();                            // 共通チェック関数
            FGJV9300Body body = (FGJV9300Body) resultForm.getBody();         // ボディデータ
            String strMode = resultForm.getControl().getMode();              // モード

            // コネクション作成
            sqlFacility.dbConnection();

            // 画面モード：処理選択（ヘッダ）の場合、下記処理を行う。
            if (strMode.equals(AAJO1600.L_MODE_HEAD)) {
                // 請求帳合先コード：未入力
                if (!inputCheck.CheckNullValue(body.getWij_Hd_UrisksCd().getValue().trim())) {
                    body.getWij_Hd_UrisksCd().setError(AAJO1210.ERR);
                    if (strMsgId.equals("")) {
                        strMsgId = AAJO1800.MSG_AAM4006E;
                        lstMsg.add("請求帳合先");
                    }
                }
            }

            // 画面モード：ボディの場合、下記処理を行う。
            if (strMode.equals(AAJO1600.L_MODE_BODY)) {
                FGJV9300Body chkBody = (FGJV9300Body) saveResultForm.getBody();// ボディデータ
                FGJV9300BodyRow row;
                FGJV9300BodyRow chkRow;
                String strChk;
                String strSskCd;
                String strCustCd;
                String strSskNm;
                String strCustNm;
                boolean bolCntChk = false;
                boolean bolSskFlg;
                boolean bolCustFlg;

                // 明細チェック
                for (int i = 0; i < body.getList().size(); i++) {
                    row = (FGJV9300BodyRow) body.getRow(i);
                    chkRow = (FGJV9300BodyRow) chkBody.getRow(i);

                    // 処理対象(行内容が変更されているもの)
                    if (!row.getTxt_Ms_Del().getValue().trim().equals(chkRow.getTxt_Ms_Del().getValue().trim())
                            || !row.getTxt_Ms_SskCd().getValue().trim().equals(chkRow.getTxt_Ms_SskCd().getValue().trim())
                            || !row.getTxt_Ms_CustCd().getValue().trim().equals(chkRow.getTxt_Ms_CustCd().getValue().trim())) {

                        // チェック対象行あり(チェックフラグを立てる)
                        bolCntChk = true;

                        // All0入力判定用フラグ初期化
                        bolSskFlg = false;
                        bolCustFlg = false;

                        // 削除
                        strChk = row.getTxt_Ms_Del().getValue().trim();
                        // "D","d"以外が入力
                        if (inputCheck.CheckNullValue(strChk)) {
                            if (!strChk.equals("D") && !strChk.equals("d")) {
                                row.getTxt_Ms_Del().setError(AAJO1210.ERR);
                                if (strMsgId.equals("")) {
                                    strMsgId = AAJO1800.MSG_AAM4006E;
                                    lstMsg.add("D");
                                }
                            }
                        }

                        if (!strChk.equals("D") && !strChk.equals("d")) {
                            // 組織コード
                            strSskCd = row.getTxt_Ms_SskCd().getValue().trim();
                            // 得意先コード
                            strCustCd = row.getTxt_Ms_CustCd().getValue().trim();
                            // 組織コード：未入力 && 得意先コード：入力有
                            if (!inputCheck.CheckNullValue(strSskCd) && inputCheck.CheckNullValue(strCustCd)) {
                                row.getTxt_Ms_SskCd().setError(AAJO1210.ERR);
                                if (strMsgId.equals("")) {
                                    strMsgId = AAJO1800.MSG_AAM4006E;
                                    lstMsg.add("組織コード");
                                }
                            }
                            // 組織コード：入力有 && 得意先コード：未入力
                            if (inputCheck.CheckNullValue(strSskCd) && !inputCheck.CheckNullValue(strCustCd)) {
                                row.getTxt_Ms_CustCd().setError(AAJO1210.ERR);
                                if (strMsgId.equals("")) {
                                    strMsgId = AAJO1800.MSG_AAM4006E;
                                    lstMsg.add("得意先コード");
                                }
                            }

                            // 組織コード、得意先コードが入力有で得意先マスタに存在しない場合
                            if (inputCheck.CheckNullValue(strCustCd) && inputCheck.CheckNullValue(strSskCd)) {
                                // All0入力時フラグを立てる
                                if (strSskCd.equals("00000")) {
                                    bolSskFlg = true;
                                }
                                if (strCustCd.equals("00000000")) {
                                    bolCustFlg = true;
                                }
                                strSskNm = sqlFacility.searchSskBmnMst(userSession, row);
                                strCustNm = sqlFacility.searchCustMst(userSession, row);
                                // 組織コード存在なし
                                if (!bolSskFlg && strSskNm.equals("")) {
                                    row.getTxt_Ms_SskCd().setError(AAJO1210.ERR);
                                    if (strMsgId.equals("")) {
                                        strMsgId = AAJO1800.MSG_AAM4018E;
                                        lstMsg.add("組織コード");
                                    }
                                } else {
                                    // マスタチェックに通れば見た目上の組織コード
                                    row.getLbl_Ms_SskNm().setValue(strSskNm);
                                }
                                // 得意先コード存在なし
                                if (!bolCustFlg && strCustNm.equals("")) {
                                    row.getTxt_Ms_CustCd().setError(AAJO1210.ERR);
                                    if (strMsgId.equals("")) {
                                        strMsgId = AAJO1800.MSG_AAM4018E;
                                        lstMsg.add("得意先コード");
                                    }
                                } else {
                                    // マスタチェックに通れば見た目上の得意先コードを変更
                                    row.getLbl_Ms_CustNm().setValue(strCustNm);
                                }
                            }
                        }
                    }
                }
                // 更新対象有無チェック
                if (!bolCntChk) {
                    // 最初の入力可能項目にエラー
                    row = (FGJV9300BodyRow) body.getRow(0);
                    if (row.getTxt_Ms_Del().getEnable().equals("Y")) {
                        // 削除が入力可能項目の場合
                        row.getTxt_Ms_Del().setError(AAJO1210.ERR);
                        if (strMsgId.equals("")) {
                            strMsgId = AAJO1800.MSG_FDM0197E;
                        }
                    }else if (row.getTxt_Ms_SskCd().getEnable().equals("Y")) {
                        // 組織コードが入力可能項目の場合
                        row.getTxt_Ms_SskCd().setError(AAJO1210.ERR);
                        if (strMsgId.equals("")) {
                            strMsgId = AAJO1800.MSG_FDM0197E;
                        }
                    }
                }
            }

            // メッセージ設定
            if (!strMsgId.equals("")) {
                resultForm.getCmnFtr().setMessage(AAJO1900.getCommonMessage(strMsgId, lstMsg));
            }

        } catch (SQLException ex) {
            throw ex;
        } finally {
            // コネクション開放
            sqlFacility.dbRelease();
        }
        return strMsgId;
    }

    /**
     * 登録・訂正・削除SQL
     *
     * @param resultForm
     * @throws Exception
     */
    public void executeSQL(FGJV9300ApiForm resultForm) throws Exception {
        FGJV9300SQLFacilities sqlFacility = new FGJV9300SQLFacilities();
        AAJO1700 inputCheck = new AAJO1700();
        FGJV9300Body body = (FGJV9300Body) resultForm.getBody();                // ボディデータ
        FGJV9300Body saveBody = (FGJV9300Body) saveResultForm.getBody();
        FGJV9300BodyRow row;
        FGJV9300BodyRow saveRow;

        try {
            // コネクション作成
            sqlFacility.dbConnection();
            for (int i = 0; i < body.getList().size(); i++) {
                String strPgId = FGJV9300ApiForm.getPROGRAM_ID();
                row = (FGJV9300BodyRow) body.getRow(i);
                saveRow = (FGJV9300BodyRow) saveBody.getRow(i);

                String strOrder = row.getLbl_Ms_Order().getValue().trim();
                String strDel = row.getTxt_Ms_Del().getValue().trim();
                String strSskCd = row.getTxt_Ms_SskCd().getValue().trim();
                String strCustCd = row.getTxt_Ms_CustCd().getValue().trim();
                String strDbFlg = saveRow.getDb_sub_Flg().getValue().trim();
                String chkSskCd = saveRow.getTxt_Ms_SskCd().getValue().trim();
                String chkCustCd = saveRow.getTxt_Ms_CustCd().getValue().trim();

                // 登録済判断
                if (strDbFlg.equals("1")) {
                    // 削除判断
                    if (strDel.equals("D") || (strSskCd.equals("") && strCustCd.equals(""))) {
                        // 削除SQL実行
                        sqlFacility.deleteFDM130(userSession, strOrder, row, body);
                    } else {
                        // 訂正判断
                        if (!strSskCd.equals(chkSskCd) || !strCustCd.equals(chkCustCd)) {
                            // 更新SQL実行
                            sqlFacility.updateFDM130(userSession, strPgId, strOrder, row, body, saveRow);
                        }
                    }
                } else {
                    // 登録判断
                    if (inputCheck.CheckNullValue(strSskCd) || inputCheck.CheckNullValue(strCustCd)) {
                        // 登録SQL実行
                        sqlFacility.insertFDM130(userSession, body, row, strPgId, strOrder);
                    }
                }
                // コミット
                sqlFacility.commit();
            }
        } catch (SQLException ex) {
            throw ex;
        } finally {
            // ロールバック
            sqlFacility.rollback();
            // コネクション開放
            sqlFacility.dbRelease();
        }
    }

    /**
     * PFKeyの使用可否制御
     *
     * @param resultForm
     * @param mode
     */
    public static void setPFKeyEnable(FGJV9300ApiForm resultForm, String mode) {

        resultForm.getCmnFtr().getFunckey(1).setName(FUNC1_NAME);             // 検索(名称設定)

        switch (mode) {

            //ボディモード
            case AAJO1600.L_MODE_BODY:
                resultForm.getCmnFtr().getFunckey(1).setSG(AAJO1220.ENABLED);       // 検索
                resultForm.getCmnFtr().getCommonFunckey(6).setSG(AAJO1220.ENABLED); // 確認
                resultForm.getCmnFtr().getCommonFunckey(7).setSG(AAJO1220.ENABLED); // 戻る
                resultForm.getCmnFtr().getCommonFunckey(8).setSG(AAJO1220.ENABLED); // Hコピー
                resultForm.getCmnFtr().getCommonFunckey(9).setSG(AAJO1220.ENABLED); // クリア
                resultForm.getCmnFtr().getCommonFunckey(10).setSG(AAJO1220.ENABLED);// 終了
                break;

            //確認モード
            case AAJO1600.L_MODE_KAKUNIN:
                resultForm.getCmnFtr().getFunckey(1).setSG(AAJO1220.DISABLED);      // 検索
                resultForm.getCmnFtr().getCommonFunckey(6).setSG(AAJO1220.ENABLED); // 確認
                resultForm.getCmnFtr().getCommonFunckey(7).setSG(AAJO1220.ENABLED); // 戻る
                resultForm.getCmnFtr().getCommonFunckey(8).setSG(AAJO1220.ENABLED); // Hコピー
                resultForm.getCmnFtr().getCommonFunckey(9).setSG(AAJO1220.ENABLED); // クリア
                resultForm.getCmnFtr().getCommonFunckey(10).setSG(AAJO1220.ENABLED);// 終了
                break;

            //結果モード
            case AAJO1600.L_MODE_KEKKA:
                resultForm.getCmnFtr().getFunckey(1).setSG(AAJO1220.DISABLED);      // 検索
                resultForm.getCmnFtr().getCommonFunckey(6).setSG(AAJO1220.DISABLED);// 確認
                resultForm.getCmnFtr().getCommonFunckey(7).setSG(AAJO1220.ENABLED); // 戻る
                resultForm.getCmnFtr().getCommonFunckey(8).setSG(AAJO1220.ENABLED); // Hコピー
                resultForm.getCmnFtr().getCommonFunckey(9).setSG(AAJO1220.ENABLED); // クリア
                resultForm.getCmnFtr().getCommonFunckey(10).setSG(AAJO1220.ENABLED);// 終了
                break;
            default:
                break;
        }
    }
}
